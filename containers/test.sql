SELECT static_data.oshighway_roadlink.toid, anon_1.measurement_start_utc, sum(anon_1.occupancy_percentage / (dynamic_features.scoot_road_match.scoot_road_distance * anon_2.total_inverse_distance)) AS occupancy_percentage_waverage, sum(anon_1.congestion_percentage / (dynamic_features.scoot_road_match.scoot_road_distance * anon_2.total_inverse_distance)) AS congestion_percentage_waverage, sum(anon_1.saturation_percentage / (dynamic_features.scoot_road_match.scoot_road_distance * anon_2.total_inverse_distance)) AS saturation_percentage_waverage, sum(anon_1.flow_raw_count / (dynamic_features.scoot_road_match.scoot_road_distance * anon_2.total_inverse_distance)) AS flow_count_waverage, sum(anon_1.occupancy_raw_count / (dynamic_features.scoot_road_match.scoot_road_distance * anon_2.total_inverse_distance)) AS occupancy_count_waverage, sum(anon_1.congestion_raw_count / (dynamic_features.scoot_road_match.scoot_road_distance * anon_2.total_inverse_distance)) AS congestion_count_waverage, sum(anon_1.saturation_raw_count / (dynamic_features.scoot_road_match.scoot_road_distance * anon_2.total_inverse_distance)) AS saturation_count_waverage 
FROM (SELECT dynamic_data.scoot_reading.detector_id AS detector_id, dynamic_data.scoot_reading.measurement_start_utc AS measurement_start_utc, dynamic_data.scoot_reading.measurement_end_utc AS measurement_end_utc, dynamic_data.scoot_reading.n_vehicles_in_interval AS n_vehicles_in_interval, dynamic_data.scoot_reading.occupancy_percentage AS occupancy_percentage, dynamic_data.scoot_reading.congestion_percentage AS congestion_percentage, dynamic_data.scoot_reading.saturation_percentage AS saturation_percentage, dynamic_data.scoot_reading.flow_raw_count AS flow_raw_count, dynamic_data.scoot_reading.occupancy_raw_count AS occupancy_raw_count, dynamic_data.scoot_reading.congestion_raw_count AS congestion_raw_count, dynamic_data.scoot_reading.saturation_raw_count AS saturation_raw_count, dynamic_data.scoot_reading.region AS region 
FROM dynamic_data.scoot_reading 
WHERE dynamic_data.scoot_reading.measurement_start_utc BETWEEN :measurement_start_utc_1 AND :measurement_start_utc_2) AS anon_1, static_data.oshighway_roadlink JOIN dynamic_features.scoot_road_match ON static_data.oshighway_roadlink.toid = dynamic_features.scoot_road_match.road_toid JOIN (SELECT dynamic_features.scoot_road_match.road_toid AS road_toid, sum(:scoot_road_distance_1 / dynamic_features.scoot_road_match.scoot_road_distance) AS total_inverse_distance 
FROM dynamic_features.scoot_road_match GROUP BY dynamic_features.scoot_road_match.road_toid) AS anon_2 ON static_data.oshighway_roadlink.toid = anon_2.road_toid 
WHERE anon_1.detector_id = dynamic_features.scoot_road_match.detector_n GROUP BY static_data.oshighway_roadlink.toid, anon_1.measurement_start_utc ORDER BY anon_1.measurement_start_utc