trigger:
- master
- k8s_webserver

pr: none

variables:
  namespace: "cleanairtest1"
  helm_release: "cleanairtest1"

stages:
# - stage: Docker
#   displayName: Add new Docker images to ACR
#   jobs:
#   - job: BuildAndPushDocker
#     displayName: Build and register Docker images
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     # Build AQE
#     - script: |
#         docker build -t $(ACR_SERVER)/aqe:$(Build.SourceVersion)FromPipeline -f containers/dockerfiles/add_aqe_readings.Dockerfile containers
#       displayName: 'Build AQE'
#     # Build LAQN
#     - script: |
#         docker build -t $(ACR_SERVER)/laqn:$(Build.SourceVersion)FromPipeline -f containers/dockerfiles/add_laqn_readings.Dockerfile containers
#       displayName: 'Build LAQN'
#     # Build SCOOT
#     - script: |
#         docker build -t $(ACR_SERVER)/scoot:$(Build.SourceVersion)FromPipeline -f containers/dockerfiles/add_scoot_readings.Dockerfile containers
#       displayName: 'Build SCOOT'
#     # List available images
#     - script: |
#         docker images
#       displayName: 'List images'
#     # Login to ACR
#     - script: |
#         echo "$(ACR_PASSWORD)" | docker login -u "$(ACR_USERNAME)" --password-stdin "$(ACR_SERVER)"
#       displayName: 'Login to ACR'
#     # Push Docker images to ACR
#     - script: |
#         docker push $(ACR_SERVER)/aqe:$(Build.SourceVersion)FromPipeline
#         docker push $(ACR_SERVER)/laqn:$(Build.SourceVersion)FromPipeline
#         docker push $(ACR_SERVER)/scoot:$(Build.SourceVersion)FromPipeline
#       displayName: 'Push Docker images to ACR'

- stage: Kubernetes
  displayName: Update Helm chart on Azure Kubernetes cluster
  jobs:
  - job: UpdateAzureKubernetesHelmChart
    displayName: Install Kubectl and install/upgrade helm
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Get Azure credentials
    - task: AzureCLI@1
      displayName: 'Load Azure credentials'
      inputs:
        azureSubscription: 'cleanair-scn'
        scriptLocation: 'inlineScript'
        inlineScript: 'az aks get-credentials -n $(KUBERNETES_CLUSTER_NAME) -g $(KUBERNETES_RESOURCE_GROUP)'
    # Get cluster Kubernetes version
    - task: AzureCLI@1
      displayName: 'Get version of Kubernetes installed on the cluster'
      inputs:
        azureSubscription: 'cleanair-scn'
        scriptLocation: 'inlineScript'
        inlineScript: |
          KUBERNETES_VERSION=$(az aks show -n $(KUBERNETES_CLUSTER_NAME) -g $(KUBERNETES_RESOURCE_GROUP) --query "kubernetesVersion" -o tsv)
          echo "Kubernetes version on the cluster is ${KUBERNETES_VERSION}"
          echo "##vso[task.setvariable variable=kubernetes_version]$KUBERNETES_VERSION"
    # Install Kubectl
    - task: KubectlInstaller@0
      displayName: 'Install Kubectl'
      inputs:
        kubectlVersion: $(KUBERNETES_VERSION) #'1.14.8'
    # Install Helm 3
    - task: HelmInstaller@1
      displayName: 'Update to Helm 3'
      inputs:
        helmVersionToInstall: '3.0.2'
    # Prepare Helm chart
    - script: |
        kubectl version
        if [ "$(kubectl get namespace | grep $(NAMESPACE))" == "" ]; then
          kubectl create namespace $(NAMESPACE)
        fi
        helm list --namespace $(NAMESPACE)
        helm version
        sed -i 's/^imageTag:.*$/imageTag: $(Build.SourceVersion)/' kubernetes/cleanair/values.yaml
        cat kubernetes/cleanair/values.yaml
        # helm package --destination $(Build.ArtifactStagingDirectory) kubernetes/cleanair
        # CHART_VERSION=$(grep version kubernetes/cleanair/Chart.yaml | cut -d' ' -f2)
        # echo "Helm chart version is ${CHART_VERSION}"
        # helm version
        helm upgrade --namespace $(NAMESPACE) --install $(HELM_RELEASE) kubernetes/cleanair
        echo "##vso[task.setvariable variable=chart_version]$CHART_VERSION"
      displayName: 'Prepare Helm chart'
    # - script: |
    #     helm version
    #     helm upgrade --namespace $(NAMESPACE) --install --wait $(HELM_RELEASE) kubernetes/cleanair
    #   displayName: 'Install/upgrade Helm chart'

    # # Install/upgrade Helm chart
    # - task: HelmDeploy@0
    #   displayName: 'Install/upgrade Helm chart'
    #   inputs:
    #     connectionType: Azure Resource Manager
    #     azureSubscriptionEndpoint: 'cleanair-scn'
    #     azureResourceGroup: $(KUBERNETES_RESOURCE_GROUP)
    #     kubernetesCluster: $(KUBERNETES_CLUSTER_NAME)
    #     namespace: $(NAMESPACE)
    #     command: upgrade
    #     chartType: filepath
    #     # chartPath: $(Build.ArtifactStagingDirectory)/cleanair-$(CHART_VERSION).tgz
    #     chartPath: kubernetes/cleanair
    #     releaseName: cleanair
    #     install: true
