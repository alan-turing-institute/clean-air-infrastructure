trigger:
- master
- k8s_webserver

pr: none

variables:
  namespace: "cleanair"
  helm_release: "cleanair"
  kubernetes_cluster_name: "cleanair-kubernetes"
  kubernetes_cluster_resource_group: "RG_CLEANAIR_KUBERNETES_CLUSTER"

stages:
# - stage: Docker
#   displayName: Add new Docker images to ACR
#   jobs:
#   - job: BuildAndPushDocker
#     displayName: Build and register Docker images
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     # Build AQE
#     - script: |
#         docker build -t $(ACR_SERVER)/aqe:$(Build.SourceVersion) -f containers/dockerfiles/add_aqe_readings.Dockerfile containers
#       displayName: 'Build AQE'
#     # Build LAQN
#     - script: |
#         docker build -t $(ACR_SERVER)/laqn:$(Build.SourceVersion) -f containers/dockerfiles/add_laqn_readings.Dockerfile containers
#       displayName: 'Build LAQN'
#     # Build SCOOT
#     - script: |
#         docker build -t $(ACR_SERVER)/scoot:$(Build.SourceVersion) -f containers/dockerfiles/add_scoot_readings.Dockerfile containers
#       displayName: 'Build SCOOT'
#     # List available images
#     - script: |
#         docker images
#       displayName: 'List images'
#     # Login to ACR
#     - script: |
#         echo "$(ACR_PASSWORD)" | docker login -u "$(ACR_USERNAME)" --password-stdin "$(ACR_SERVER)"
#       displayName: 'Login to ACR'
#     # Push Docker images to ACR
#     - script: |
#         docker push $(ACR_SERVER)/aqe:$(Build.SourceVersion)
#         docker push $(ACR_SERVER)/laqn:$(Build.SourceVersion)
#         docker push $(ACR_SERVER)/scoot:$(Build.SourceVersion)
#       displayName: 'Push Docker images to ACR'

- stage: Kubernetes
  displayName: Update Helm chart on Azure Kubernetes cluster
  jobs:
  - job: UpdateAzureKubernetesHelmChart
    displayName: Install Kubectl and install/upgrade helm
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Connect to Azure
    - task: AzureCLI@1
      displayName: 'Connect to Azure'
      inputs:
        azureSubscription: 'cleanair-scn'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials -n $(KUBERNETES_CLUSTER_NAME) -g $(KUBERNETES_CLUSTER_RESOURCE_GROUP)
          KUBERNETES_VERSION=$(az aks show -n $(KUBERNETES_CLUSTER_NAME) -g $(KUBERNETES_CLUSTER_RESOURCE_GROUP) --query "kubernetesVersion" -o tsv)
          echo "##vso[task.setvariable variable=kubernetes_version]$KUBERNETES_VERSION"
          AWS_KEY=$(az keyvault secret show --vault-name cleanair-secrets --name scoot-aws-key --query "value" -o tsv)
          echo "##vso[task.setvariable variable=aws_key]$AWS_KEY"
          AWS_KEY_ID=$(az keyvault secret show --vault-name cleanair-secrets --name scoot-aws-key-id --query "value" -o tsv)
          echo "##vso[task.setvariable variable=aws_key_id]$AWS_KEY_ID"
          DB_NAME=$(az keyvault secret show --vault-name cleanair-secrets --name cleanair-inputs-db-name --query "value" -o tsv)
          echo "##vso[task.setvariable variable=db_name]$DB_NAME"
          DB_PASSWORD=$(az keyvault secret show --vault-name cleanair-secrets --name cleanair-inputs-db-admin-password --query "value" -o tsv)
          echo "##vso[task.setvariable variable=db_password]$DB_PASSWORD"
          DB_USERNAME=$(az keyvault secret show --vault-name cleanair-secrets --name cleanair-inputs-db-admin-username --query "value" -o tsv)
          echo "##vso[task.setvariable variable=db_username]$DB_USERNAME"
          DB_SERVER=$(az keyvault secret show --vault-name cleanair-secrets --name cleanair-inputs-db-server-name --query "value" -o tsv)
          echo "##vso[task.setvariable variable=db_password]$DB_SERVER"
    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'cleanair-scn'
        KeyVaultName: 'cleanair-secrets'
        SecretsFilter: 'container-registry-login-server'
    # Install matching Kubectl version
    - task: KubectlInstaller@0
      displayName: 'Install matching Kubectl version'
      inputs:
        kubectlVersion: $(KUBERNETES_VERSION)
    # Install latest Helm version
    - task: HelmInstaller@1
      displayName: 'Install latest Helm version'
      inputs:
        helmVersionToInstall: latest
    # List installed versions
    - script: |
        echo "Kubernetes version on the cluster is ${KUBERNETES_VERSION}"
        echo "Kubectl details:"
        kubectl version
        echo "Helm details:"
        helm version
        echo "Helm $(NAMESPACE) namespace:"
        helm list --namespace $(NAMESPACE)
      displayName: 'List installed versions'
    # Add secrets to Kubernetes
    - script: |
        echo "Adding secrets to Kubernetes"
        echo "container-registry-login-server $(CONTAINER-REGISTRY-LOGIN-SERVER)"
        if [ "$(kubectl get secret regcred --namespace cleanair | grep regcred)" == "" ]; then
          kubectl create secret docker-registry --namespace cleanair regcred --docker-server=$(ACR_SERVER) --docker-username=$(ACR_USERNAME) --docker-password=$(ACR_PASSWORD)
        fi
        echo "DB_SERVER: $(DB_SERVER)"
        echo "DB_SERVER: ${DB_SERVER}"
        if [ "$(kubectl get secret secrets --namespace cleanair | grep secrets)" == "" ]; then
          kubectl create secret generic --namespace cleanair secrets --from-literal=host=${DB_SERVER).postgres.database.azure.com --from-literal=port=5432 --from-literal=db_name=$(DB_NAME) --from-literal=username=$(DB_USERNAME)@$(DB_SERVER) --from-literal=password=$(DB_PASSWORD) --from-literal=ssl_mode=require --from-literal=aws_key_id=$(AWS_KEY_ID) --from-literal=aws_key=$(AWS_KEY)
        fi
      displayName: 'Add secrets to Kubernetes'
    # Prepare Helm chart
    - script: |
        # Check whether we need to create a new namespace
        if [ "$(kubectl get namespace | grep $(NAMESPACE))" == "" ]; then
          kubectl create namespace $(NAMESPACE)
        fi
        sed -i 's/^imageTag:.*$/imageTag: $(Build.SourceVersion)/' kubernetes/cleanair/values.yaml
        # helm package --destination $(Build.ArtifactStagingDirectory) kubernetes/cleanair
        # CHART_VERSION=$(grep version kubernetes/cleanair/Chart.yaml | cut -d' ' -f2)
        # echo "Helm chart version is ${CHART_VERSION}"
        # helm version
        # helm upgrade --namespace $(NAMESPACE) --cleanup-on-fail --install $(HELM_RELEASE) kubernetes/cleanair
        # echo "##vso[task.setvariable variable=chart_version]$CHART_VERSION"
      displayName: 'Prepare Helm chart'
    # Install/upgrade Helm chart
    - task: HelmDeploy@0
      displayName: 'Install/upgrade Helm chart'
      inputs:
        connectionType: Azure Resource Manager
        azureSubscriptionEndpoint: 'cleanair-scn'
        azureResourceGroup: $(KUBERNETES_CLUSTER_RESOURCE_GROUP)
        kubernetesCluster: $(KUBERNETES_CLUSTER_NAME)
        namespace: $(NAMESPACE)
        command: upgrade
        arguments: --cleanup-on-fail
        chartType: filepath
        chartPath: kubernetes/cleanair
        releaseName: cleanair
        install: true
